From 2033a090426660f34dabd9b734874e6150e36796 Mon Sep 17 00:00:00 2001
Message-ID: <2033a090426660f34dabd9b734874e6150e36796.1720719988.git.leon@kernel.org>
From: Leon Romanovsky <leon@kernel.org>
Date: Wed, 1 Nov 2023 15:54:20 +0200
Subject: [PATCH] mlx5: Fix wrong format compilation errors

In file included from ../mellanox/mlx_ame.h:19,
                 from mlx5/mlx5_ame.h:17,
                 from mlx5/mlx5_ifc_missing.h:19,
                 from mlx5/mlx5_ifc_types.h:19,
                 from mlx5/mlx5.h:17,
                 from mlx5/mlx5_virtio.h:17,
                 from mlx5/mlx5_virtio.c:14:
mlx5/mlx5_virtio.c: In function 'mlx5_virtio_device_feature_check':
mlx5/mlx5.h:7775:31: error: format '%x' expects argument of type 'unsigned int', but argument 10 has type 'long unsigned int' [-Werror=format=]
 7775 | #define MLX5_DEVICE_PRINT_FMT "D%u:P%u:F%u:V%u "
      |                               ^~~~~~~~~~~~~~~~~~
../mellanox/mlx_log.h:179:63: note: in definition of macro '__MLX_LOG_COMMON'
  179 |                 mlx_logger(__FILE__, __LINE__, #what, #level, fmt, ## __VA_ARGS__);            \
      |                                                               ^~~
mlx5/mlx5.h:7782:5: note: in expansion of macro 'MLX_LOG_ERR'
 7782 |     MLX_LOG_ERR(what, MLX5_DEVICE_PRINT_FMT fmt,                                   \
      |     ^~~~~~~~~~~
mlx5/mlx5.h:7782:23: note: in expansion of macro 'MLX5_DEVICE_PRINT_FMT'
 7782 |     MLX_LOG_ERR(what, MLX5_DEVICE_PRINT_FMT fmt,                                   \
      |                       ^~~~~~~~~~~~~~~~~~~~~
mlx5/mlx5_virtio.c:1218:17: note: in expansion of macro 'MLX5_LOG_ERR'
 1218 |                 MLX5_LOG_ERR(s, EMU, "GUEST_CSUM (0x%x) must be set when GUEST_TSO4 is set (0x%x)\n",
      |                 ^~~~~~~~~~~~

Signed-off-by: Leon Romanovsky <leon@kernel.org>
---
 .../mlx5_cmdif_general_obj/mlx5_opcode_dek.c  |  8 ++---
 .../mlx5_opcode_geneve_tlv_option.c           |  8 ++---
 .../mlx5_opcode_ipsec_offload.c               |  8 ++---
 .../mlx5_opcode_match_definer.c               |  8 ++---
 .../mlx5_opcode_virtio_device_emulation.c     |  4 +--
 mellanox/mlx5/mlx5_config.c                   | 14 ++++----
 mellanox/mlx5/mlx5_virtio.c                   | 32 +++++++++----------
 7 files changed, 41 insertions(+), 41 deletions(-)

diff --git a/mellanox/mlx5/mlx5_cmdif_general_obj/mlx5_opcode_dek.c b/mellanox/mlx5/mlx5_cmdif_general_obj/mlx5_opcode_dek.c
index a81e9f5e8..286f946fc 100644
--- a/mellanox/mlx5/mlx5_cmdif_general_obj/mlx5_opcode_dek.c
+++ b/mellanox/mlx5/mlx5_cmdif_general_obj/mlx5_opcode_dek.c
@@ -37,7 +37,7 @@ static int mlx5_cmd_gen_obj_ops_create_dek(MLX5State *s, const void *in_buf, uin
 
     if (!(MLX5_GET64(cmd_hca_cap, &s->hca_current_cap, general_obj_types_63_0) &
           MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_DEK)) {
-        MLX5_ASSERT_MSG(s, 0, CMD, "CREATE_GENERAL_OBJ: obj_type ENCRYPTION KEY (0x%x) isn't supported\n",
+        MLX5_ASSERT_MSG(s, 0, CMD, "CREATE_GENERAL_OBJ: obj_type ENCRYPTION KEY (0x%"PRIx64") isn't supported\n",
                         MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_DEK);
         cmd_status = MLX5_CMD_STAT_BAD_PARAM_ERR;
         goto out;
@@ -131,7 +131,7 @@ static int mlx5_cmd_gen_obj_ops_query_head_dek(MLX5State *s, const void *in_buf,
     output_size = MLX5_ST_SZ_BYTES(query_encryption_key_out);
 
     if (!(MLX5_GET64(cmd_hca_cap, &s->hca_current_cap, general_obj_types_63_0) & MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_DEK)) {
-        MLX5_LOG_ERR(s, CMD, "QUERY_GENERAL_OBJ: obj_type ENCRYPTION KEY (0x%x) isn't supported\n",
+        MLX5_LOG_ERR(s, CMD, "QUERY_GENERAL_OBJ: obj_type ENCRYPTION KEY (0x%"PRIx64") isn't supported\n",
                      MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_DEK);
         cmd_status = MLX5_CMD_STAT_BAD_PARAM_ERR;
         goto out;
@@ -203,7 +203,7 @@ static int mlx5_cmd_gen_obj_ops_modify_dek(MLX5State *s, const void *in_buf)
     MLX5EncryptionKey *ekey;
 
     if (!(MLX5_GET64(cmd_hca_cap, &s->hca_current_cap, general_obj_types_63_0) & MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_DEK)) {
-        MLX5_LOG_ERR(s, CMD, "MODIFY_GENERAL_OBJ: obj_type ENCRYPTION KEY (0x%x) isn't supported\n",
+        MLX5_LOG_ERR(s, CMD, "MODIFY_GENERAL_OBJ: obj_type ENCRYPTION KEY (0x%"PRIx64") isn't supported\n",
                      MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_DEK);
         cmd_status = MLX5_CMD_STAT_BAD_PARAM_ERR;
         goto out;
@@ -245,7 +245,7 @@ static int mlx5_cmd_gen_obj_ops_destroy_dek(MLX5State *s, const void *in_buf)
 
     if (!(MLX5_GET64(cmd_hca_cap, &s->hca_current_cap, general_obj_types_63_0) &
           MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_DEK)) {
-        MLX5_LOG_ERR(s, CMD, "DESTROY_GENERAL_OBJ: obj_type ENCRYPTION KEY (0x%x) isn't supported\n",
+        MLX5_LOG_ERR(s, CMD, "DESTROY_GENERAL_OBJ: obj_type ENCRYPTION KEY (0x%"PRIx64") isn't supported\n",
                      MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_DEK);
         cmd_status = MLX5_CMD_STAT_BAD_PARAM_ERR;
         goto out;
diff --git a/mellanox/mlx5/mlx5_cmdif_general_obj/mlx5_opcode_geneve_tlv_option.c b/mellanox/mlx5/mlx5_cmdif_general_obj/mlx5_opcode_geneve_tlv_option.c
index 90f8ed06c..cca15e8f4 100644
--- a/mellanox/mlx5/mlx5_cmdif_general_obj/mlx5_opcode_geneve_tlv_option.c
+++ b/mellanox/mlx5/mlx5_cmdif_general_obj/mlx5_opcode_geneve_tlv_option.c
@@ -38,7 +38,7 @@ static int mlx5_cmd_gen_obj_ops_create_geneve_tlv_option(MLX5State *s, const voi
 
     if (!(MLX5_GET64(cmd_hca_cap, &s->hca_current_cap, general_obj_types_63_0) &
           MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_GENEVE_TLV_OPTION)) {
-        MLX5_LOG_ERR(s, CMD, "CREATE_GENERAL_OBJ: obj_type GENEVE_TLV_OPTION (0x%x) isn't supported\n",
+        MLX5_LOG_ERR(s, CMD, "CREATE_GENERAL_OBJ: obj_type GENEVE_TLV_OPTION (0x%"PRIx64") isn't supported\n",
                      MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_GENEVE_TLV_OPTION);
         cmd_status = MLX5_CMD_STAT_BAD_PARAM_ERR;
         goto out;
@@ -141,7 +141,7 @@ static int mlx5_cmd_gen_obj_ops_query_head_geneve_tlv_option(MLX5State *s, const
 
     if (!(MLX5_GET64(cmd_hca_cap, &s->hca_current_cap, general_obj_types_63_0) &
           MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_GENEVE_TLV_OPTION)) {
-        MLX5_LOG_ERR(s, CMD, "QUERY_GENERAL_OBJ: obj_type GENEVE_TLV_OPTION (0x%x) isn't supported\n",
+        MLX5_LOG_ERR(s, CMD, "QUERY_GENERAL_OBJ: obj_type GENEVE_TLV_OPTION (0x%"PRIx64") isn't supported\n",
                      MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_GENEVE_TLV_OPTION);
         cmd_status = MLX5_CMD_STAT_BAD_PARAM_ERR;
         goto out;
@@ -201,7 +201,7 @@ static int mlx5_cmd_gen_obj_ops_modify_geneve_tlv_option(MLX5State *s, const voi
 
     if (!(MLX5_GET64(cmd_hca_cap, &s->hca_current_cap, general_obj_types_63_0) &
           MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_GENEVE_TLV_OPTION)) {
-        MLX5_LOG_ERR(s, CMD, "MODIFY_GENERAL_OBJ: obj_type GENEVE_TLV_OPTION (0x%x) isn't supported\n",
+        MLX5_LOG_ERR(s, CMD, "MODIFY_GENERAL_OBJ: obj_type GENEVE_TLV_OPTION (0x%"PRIx64") isn't supported\n",
                      MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_GENEVE_TLV_OPTION);
         cmd_status = MLX5_CMD_STAT_BAD_PARAM_ERR;
         goto out;
@@ -245,7 +245,7 @@ static int mlx5_cmd_gen_obj_ops_destroy_geneve_tlv_option(MLX5State *s, const vo
 
     if (!(MLX5_GET64(cmd_hca_cap, &s->hca_current_cap, general_obj_types_63_0) &
           MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_GENEVE_TLV_OPTION)) {
-        MLX5_LOG_ERR(s, CMD, "DESTROY_GENERAL_OBJ: obj_type GENEVE_TLV_OPTION (0x%x) isn't supported\n",
+        MLX5_LOG_ERR(s, CMD, "DESTROY_GENERAL_OBJ: obj_type GENEVE_TLV_OPTION (0x%"PRIx64") isn't supported\n",
                      MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_GENEVE_TLV_OPTION);
         cmd_status = MLX5_CMD_STAT_BAD_PARAM_ERR;
         goto out;
diff --git a/mellanox/mlx5/mlx5_cmdif_general_obj/mlx5_opcode_ipsec_offload.c b/mellanox/mlx5/mlx5_cmdif_general_obj/mlx5_opcode_ipsec_offload.c
index 4a5e51a04..6fe6254f5 100644
--- a/mellanox/mlx5/mlx5_cmdif_general_obj/mlx5_opcode_ipsec_offload.c
+++ b/mellanox/mlx5/mlx5_cmdif_general_obj/mlx5_opcode_ipsec_offload.c
@@ -218,7 +218,7 @@ static int mlx5_cmd_gen_obj_ops_create_ipsec_offload(MLX5State *s, const void *i
 
     if (!(MLX5_GET64(cmd_hca_cap, &s->hca_current_cap, general_obj_types_63_0) &
           MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_IPSEC_OFFLOAD)) {
-        MLX5_LOG_ERR(s, CMD, "CREATE_GENERAL_OBJ: obj_type IPSec offload (0x%x) isn't supported\n",
+        MLX5_LOG_ERR(s, CMD, "CREATE_GENERAL_OBJ: obj_type IPSec offload (0x%"PRIx64") isn't supported\n",
                      MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_IPSEC_OFFLOAD);
         cmd_status = MLX5_CMD_STAT_BAD_PARAM_ERR;
         goto out;
@@ -392,7 +392,7 @@ static int mlx5_cmd_gen_obj_ops_query_head_ipsec_offload(MLX5State *s, const voi
     output_size = MLX5_ST_SZ_BYTES(query_ipsec_offload_out);
 
     if (!(MLX5_GET64(cmd_hca_cap, &s->hca_current_cap, general_obj_types_63_0) & MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_IPSEC_OFFLOAD)) {
-        MLX5_LOG_ERR(s, CMD, "QUERY_GENERAL_OBJ: obj_type IPSEC OFFLOAD (0x%x) isn't supported\n",
+        MLX5_LOG_ERR(s, CMD, "QUERY_GENERAL_OBJ: obj_type IPSEC OFFLOAD (0x%"PRIx64") isn't supported\n",
                      MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_IPSEC_OFFLOAD);
         cmd_status = MLX5_CMD_STAT_BAD_PARAM_ERR;
         goto out;
@@ -502,7 +502,7 @@ static int mlx5_cmd_gen_obj_ops_modify_ipsec_offload(MLX5State *s, const void *i
 
     /* inbox + model checks */
     if (!(MLX5_GET64(cmd_hca_cap, &s->hca_current_cap, general_obj_types_63_0) & MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_IPSEC_OFFLOAD)) {
-        MLX5_LOG_ERR(s, CMD, "MODIFY_GENERAL_OBJ: obj_type IPSEC OFFLOAD (0x%x) isn't supported\n",
+        MLX5_LOG_ERR(s, CMD, "MODIFY_GENERAL_OBJ: obj_type IPSEC OFFLOAD (0x%"PRIx64") isn't supported\n",
                      MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_IPSEC_OFFLOAD);
         cmd_status = MLX5_CMD_STAT_BAD_PARAM_ERR;
         goto out;
@@ -699,7 +699,7 @@ static int mlx5_cmd_gen_obj_ops_destroy_ipsec_offload(MLX5State *s, const void *
 
     if (!(MLX5_GET64(cmd_hca_cap, &s->hca_current_cap, general_obj_types_63_0) &
           MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_IPSEC_OFFLOAD)) {
-        MLX5_LOG_ERR(s, CMD, "DESTROY_GENERAL_OBJ: obj_type IPSEC OFFLOAD (0x%x) isn't supported\n",
+        MLX5_LOG_ERR(s, CMD, "DESTROY_GENERAL_OBJ: obj_type IPSEC OFFLOAD (0x%"PRIx64") isn't supported\n",
                      MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_IPSEC_OFFLOAD);
         cmd_status = MLX5_CMD_STAT_BAD_PARAM_ERR;
         goto out;
diff --git a/mellanox/mlx5/mlx5_cmdif_general_obj/mlx5_opcode_match_definer.c b/mellanox/mlx5/mlx5_cmdif_general_obj/mlx5_opcode_match_definer.c
index e41ea18cf..15dd8ab91 100644
--- a/mellanox/mlx5/mlx5_cmdif_general_obj/mlx5_opcode_match_definer.c
+++ b/mellanox/mlx5/mlx5_cmdif_general_obj/mlx5_opcode_match_definer.c
@@ -65,7 +65,7 @@ static int mlx5_cmd_gen_obj_ops_create_match_definer(MLX5State *s, const void *i
     MLX5_DUMP_CMD(match_definer, obj_context);
 
     if (!(MLX5_GET64(cmd_hca_cap, &s->hca_current_cap, general_obj_types_63_0) & MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_MATCH_DEFINER)) {
-        MLX5_LOG_ERR(s, CMD, "CREATE_GENERAL_OBJ(Match Definer): obj_type Match Definer (0x%x) isn't supported\n",
+        MLX5_LOG_ERR(s, CMD, "CREATE_GENERAL_OBJ(Match Definer): obj_type Match Definer (0x%"PRIx64") isn't supported\n",
                      MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_MATCH_DEFINER);
         cmd_status = MLX5_CMD_STAT_BAD_PARAM_ERR;
         goto out;
@@ -144,7 +144,7 @@ static int mlx5_cmd_gen_obj_ops_query_head_match_definer(MLX5State *s, const voi
 
     if (!(MLX5_GET64(cmd_hca_cap, &s->hca_current_cap, general_obj_types_63_0) &
           MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_MATCH_DEFINER)) {
-        MLX5_LOG_ERR(s, CMD, "QUERY_GENERAL_OBJ(MATCH DEFINER): obj_type MATCH DEFINER (0x%x) isn't supported\n",
+        MLX5_LOG_ERR(s, CMD, "QUERY_GENERAL_OBJ(MATCH DEFINER): obj_type MATCH DEFINER (0x%"PRIx64") isn't supported\n",
                      MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_MATCH_DEFINER);
         cmd_status = MLX5_CMD_STAT_BAD_PARAM_ERR;
         goto out;
@@ -215,7 +215,7 @@ static int mlx5_cmd_gen_obj_ops_modify_match_definer(MLX5State *s, const void *i
 
     if (!(MLX5_GET64(cmd_hca_cap, &s->hca_current_cap, general_obj_types_63_0) &
           MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_MATCH_DEFINER)) {
-        MLX5_LOG_ERR(s, CMD, "MODIFY_GENERAL_OBJ(MATCH DEFINER): obj_type MATCH_DEFINER (0x%x) isn't supported\n",
+        MLX5_LOG_ERR(s, CMD, "MODIFY_GENERAL_OBJ(MATCH DEFINER): obj_type MATCH_DEFINER (0x%"PRIx64") isn't supported\n",
                      MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_MATCH_DEFINER);
         cmd_status = MLX5_CMD_STAT_BAD_PARAM_ERR;
         goto out;
@@ -256,7 +256,7 @@ static int mlx5_cmd_gen_obj_ops_destroy_match_definer(MLX5State *s, const void *
 
     if (!(MLX5_GET64(cmd_hca_cap, &s->hca_current_cap, general_obj_types_63_0) &
           MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_MATCH_DEFINER)) {
-        MLX5_LOG_ERR(s, CMD, "DESTROY_GENERAL_OBJ(Match Definer): obj_type MATCH DEFINER (0x%x) isn't supported\n",
+        MLX5_LOG_ERR(s, CMD, "DESTROY_GENERAL_OBJ(Match Definer): obj_type MATCH DEFINER (0x%"PRIx64") isn't supported\n",
                      MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_MATCH_DEFINER);
         cmd_status = MLX5_CMD_STAT_BAD_PARAM_ERR;
         goto out;
diff --git a/mellanox/mlx5/mlx5_cmdif_general_obj/mlx5_opcode_virtio_device_emulation.c b/mellanox/mlx5/mlx5_cmdif_general_obj/mlx5_opcode_virtio_device_emulation.c
index 4d5573548..0108894a3 100644
--- a/mellanox/mlx5/mlx5_cmdif_general_obj/mlx5_opcode_virtio_device_emulation.c
+++ b/mellanox/mlx5/mlx5_cmdif_general_obj/mlx5_opcode_virtio_device_emulation.c
@@ -111,7 +111,7 @@ static int mlx5_cmd_gen_obj_ops_create_virtio_net_device_emulation(MLX5State *s,
 
     if (!(MLX5_GET64(cmd_hca_cap, &s->hca_current_cap, general_obj_types_63_0) &
           MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_VIRTIO_NET_DEVICE_EMULATION)) {
-        MLX5_LOG_ERR(s, CMD, "CREATE_GENERAL_OBJ: obj_type VirtIO NET Device Emulation (0x%x) isn't supported\n",
+        MLX5_LOG_ERR(s, CMD, "CREATE_GENERAL_OBJ: obj_type VirtIO NET Device Emulation (0x%"PRIx64") isn't supported\n",
                      MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_VIRTIO_NET_DEVICE_EMULATION);
         cmd_status = MLX5_CMD_STAT_BAD_PARAM_ERR;
         goto out;
@@ -563,7 +563,7 @@ static int mlx5_cmd_gen_obj_ops_create_virtio_blk_device_emulation(MLX5State *s,
 
     if (!(MLX5_GET64(cmd_hca_cap, &s->hca_current_cap, general_obj_types_63_0) &
           MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_VIRTIO_BLK_DEVICE_EMULATION)) {
-        MLX5_LOG_ERR(s, CMD, "CREATE_GENERAL_OBJ: obj_type VirtIO BLK Device Emulation (0x%x) isn't supported\n",
+        MLX5_LOG_ERR(s, CMD, "CREATE_GENERAL_OBJ: obj_type VirtIO BLK Device Emulation (0x%"PRIx64") isn't supported\n",
                      MLX5_CMD_HCA_CAP_GENERAL_OBJ_TYPES_63_0_VIRTIO_BLK_DEVICE_EMULATION);
         cmd_status = MLX5_CMD_STAT_BAD_PARAM_ERR;
         goto out;
diff --git a/mellanox/mlx5/mlx5_config.c b/mellanox/mlx5/mlx5_config.c
index 094f5df70..ac8ba3be4 100644
--- a/mellanox/mlx5/mlx5_config.c
+++ b/mellanox/mlx5/mlx5_config.c
@@ -5566,9 +5566,9 @@ void mlx5_config_verify(const MLX5State *s)
 
     MLX5_LOG_FATAL_COND(s, (mlx5_config.max_pci_access_width != 0x4) &&
                         (mlx5_config.max_pci_access_width != 0x8), GENERAL,
-                        "Unsupported value for 'max_pci_access_width' (0x%x)\n", mlx5_config.max_pci_access_width);
+                        "Unsupported value for 'max_pci_access_width' (0x%x))\n", mlx5_config.max_pci_access_width);
     MLX5_LOG_FATAL_COND(s, (mlx5_config.num_of_physical_function != 0x1), GENERAL,
-                        "Unsupported value for 'num_of_physical_function' (0x%x)\n", mlx5_config.num_of_physical_function);
+                        "Unsupported value for 'num_of_physical_function' (0x%x))\n", mlx5_config.num_of_physical_function);
 
     if (MLX5_DEVICE_IS_BLUEFIELD(s->device_id)) {
         if (mlx5_is_dpu_standalone(s)) {
@@ -5597,7 +5597,7 @@ void mlx5_config_verify(const MLX5State *s)
         }
     } else {
         MLX5_LOG_FATAL_COND(s, mlx5_config.embedded_cpu == MLX5_INIT_SEG_EMBEDDED_CPU_ECPF, GENERAL,
-                            "ECPF embedded_cpu (0x%x) is supported only for BlueField devices. Device ID (0x%x)\n",
+                            "ECPF embedded_cpu (0x%x)) is supported only for BlueField devices. Device ID (0x%x)\n",
                             MLX5_INIT_SEG_EMBEDDED_CPU_ECPF, s->device_id);
 
         MLX5_LOG_FATAL_COND(s, mlx5_config.eswitch_caps.ecpf_vport_exists, GENERAL,
@@ -5607,7 +5607,7 @@ void mlx5_config_verify(const MLX5State *s)
 
     if (mlx5_config.flow_counter_access_aso_opc_mod) {
         MLX5_LOG_FATAL_COND(s, mlx5_config.flow_counter_access_aso_opc_mod != MLX5_FLOW_COUNTER_ACCESS_ASO_OPC_MOD, GENERAL,
-                            "flow_counter_access_aso_opc_mod 0x%x must be equal to 0x%x when it's different than 0\n",
+                            "flow_counter_access_aso_opc_mod 0x%x must be equal to 0x%x) when it's different than 0\n",
                             mlx5_config.flow_counter_access_aso_opc_mod, MLX5_FLOW_COUNTER_ACCESS_ASO_OPC_MOD);
     }
 
@@ -6884,7 +6884,7 @@ void mlx5_config_verify(const MLX5State *s)
                            "Unsupported stc_action_type_63_0 0x%"PRIx64", supported values are: "
                            "NOP(0x%x), COPY(0x%x), SET(0x%x), ADD(0x%x), ADD_FIELD(0x%x), REMOVE_WORDS(0x%x), "
                            "HEADER_REMOVE(0x%x), HEADER_INSERT(0x%x), FLOW_TAG(0x%x), HEADER_MODIFY_LIST(0x%x), "
-                           "COUNT(0x%x), EXECUTE ASO(0x%x), TRAILER (0x%x), EXECUTE SPU(0x%x), IPSEC_ENCRYPT(0x%x) "
+                           "COUNT(0x%x), EXECUTE ASO(0x%x), TRAILER (0x%x), EXECUTE SPU(0x%"PRIx64"), IPSEC_ENCRYPT(0x%x) "
                            "and IPSEC_DECRYPT(0x%x)\n",
                            stc_action_type_63_0,
                            MLX5_WQE_BASED_FLOW_TABLE_CAPABILITIES_STC_ACTION_TYPE_63_0_NOP,
@@ -6915,8 +6915,8 @@ void mlx5_config_verify(const MLX5State *s)
                                        MLX5_WQE_BASED_FLOW_TABLE_CAPABILITIES_STC_ACTION_TYPE_127_64_IPSEC_ENCRYPT_FIELD_SET)) {
             MLX5_LOG_FATAL(s, GENERAL,
                            "Unsupported stc_action_type_127_64 0x%"PRIx64", supported values are: "
-                           "JUMP_TO_STE_TABLE(0x%x), JUMP_TO_TIR(0x%x), JUMP_TO_FLOW_TABLE(0x%x), JUMP_TO_DROP(0x%x), "
-                           "JUMP_TO_ALLOW(0x%x), JUMP_TO_VPORT(0x%x), JUMP_TO_UPLINK(0x%x) and IPSEC_ENCRYPT_FIELD_SET(0x%"PRIx64")\n",
+                           "JUMP_TO_STE_TABLE(0x%"PRIx64"), JUMP_TO_TIR(0x%"PRIx64"), JUMP_TO_FLOW_TABLE(0x%"PRIx64"), JUMP_TO_DROP(0x%"PRIx64"), "
+                           "JUMP_TO_ALLOW(0x%"PRIx64"), JUMP_TO_VPORT(0x%"PRIx64"), JUMP_TO_UPLINK(0x%"PRIx64") and IPSEC_ENCRYPT_FIELD_SET(0x%"PRIx64")\n",
                            stc_action_type_127_64,
                            MLX5_WQE_BASED_FLOW_TABLE_CAPABILITIES_STC_ACTION_TYPE_127_64_JUMP_TO_STE_TABLE,
                            MLX5_WQE_BASED_FLOW_TABLE_CAPABILITIES_STC_ACTION_TYPE_127_64_JUMP_TO_TIR,
diff --git a/mellanox/mlx5/mlx5_virtio.c b/mellanox/mlx5/mlx5_virtio.c
index 8be112e3d..4659515dc 100644
--- a/mellanox/mlx5/mlx5_virtio.c
+++ b/mellanox/mlx5/mlx5_virtio.c
@@ -1215,80 +1215,80 @@ static int mlx5_virtio_device_feature_check(MLX5State *s, uint64_t device_featur
         }
         if (!(device_feature & MLX5_VIRTIO_NET_F_GUEST_CSUM)) {
             if (device_feature & MLX5_VIRTIO_NET_F_GUEST_TSO4) {
-                MLX5_LOG_ERR(s, EMU, "GUEST_CSUM (0x%x) must be set when GUEST_TSO4 is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "GUEST_CSUM (0x%"PRIx64") must be set when GUEST_TSO4 is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_GUEST_CSUM, MLX5_VIRTIO_NET_F_GUEST_TSO4);
                 return -1;
             }
             if (device_feature & MLX5_VIRTIO_NET_F_GUEST_TSO6) {
-                MLX5_LOG_ERR(s, EMU, "GUEST_CSUM (0x%x) must be set when GUEST_TSO6 is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "GUEST_CSUM (0x%"PRIx64") must be set when GUEST_TSO6 is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_GUEST_CSUM, MLX5_VIRTIO_NET_F_GUEST_TSO6);
                 return -1;
             }
             if (device_feature & MLX5_VIRTIO_NET_F_GUEST_UFO) {
-                MLX5_LOG_ERR(s, EMU, "GUEST_CSUM (0x%x) must be set when GUEST_UFO is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "GUEST_CSUM (0x%"PRIx64") must be set when GUEST_UFO is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_GUEST_CSUM, MLX5_VIRTIO_NET_F_GUEST_UFO);
                 return -1;
             }
         }
         if (!(device_feature & MLX5_VIRTIO_NET_F_CSUM)) {
             if (device_feature & MLX5_VIRTIO_NET_F_HOST_TSO4) {
-                MLX5_LOG_ERR(s, EMU, "CSUM (0x%x) must be set when HOST_TSO4 is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "CSUM (0x%"PRIx64") must be set when HOST_TSO4 is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_CSUM, MLX5_VIRTIO_NET_F_HOST_TSO4);
                 return -1;
             }
             if (device_feature & MLX5_VIRTIO_NET_F_HOST_TSO6) {
-                MLX5_LOG_ERR(s, EMU, "CSUM (0x%x) must be set when HOST_TSO6 is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "CSUM (0x%"PRIx64") must be set when HOST_TSO6 is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_CSUM, MLX5_VIRTIO_NET_F_HOST_TSO6);
                 return -1;
             }
             if (device_feature & MLX5_VIRTIO_NET_F_HOST_UFO) {
-                MLX5_LOG_ERR(s, EMU, "CSUM (0x%x) must be set when HOST_UFO is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "CSUM (0x%"PRIx64") must be set when HOST_UFO is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_CSUM, MLX5_VIRTIO_NET_F_HOST_UFO);
                 return -1;
             }
         }
         if (!(device_feature & (MLX5_VIRTIO_NET_F_HOST_TSO4 | MLX5_VIRTIO_NET_F_HOST_TSO6))) {
             if (device_feature & MLX5_VIRTIO_NET_F_HOST_ECN) {
-                MLX5_LOG_ERR(s, EMU, "HOST_ECN (0x%x) can't be set when HOST_TSO4 (0x%x) and HOST_TSO6 (0x%x) aren't set\n",
+                MLX5_LOG_ERR(s, EMU, "HOST_ECN (0x%"PRIx64") can't be set when HOST_TSO4 (0x%"PRIx64") and HOST_TSO6 (0x%"PRIx64") aren't set\n",
                              MLX5_VIRTIO_NET_F_HOST_ECN, MLX5_VIRTIO_NET_F_HOST_TSO4, MLX5_VIRTIO_NET_F_HOST_TSO6);
                 return -1;
             }
             if (device_feature & MLX5_VIRTIO_NET_F_RSC_EXT) {
-                MLX5_LOG_ERR(s, EMU, "RSC_EXT (0x%"PRIx64") can't be set when HOST_TSO4 (0x%x) and HOST_TSO6 (0x%x) aren't set\n",
+                MLX5_LOG_ERR(s, EMU, "RSC_EXT (0x%"PRIx64") can't be set when HOST_TSO4 (0x%"PRIx64") and HOST_TSO6 (0x%"PRIx64") aren't set\n",
                              MLX5_VIRTIO_NET_F_RSC_EXT, MLX5_VIRTIO_NET_F_HOST_TSO4, MLX5_VIRTIO_NET_F_HOST_TSO6);
                 return -1;
             }
         }
         if (!(device_feature & (MLX5_VIRTIO_NET_F_GUEST_TSO4 | MLX5_VIRTIO_NET_F_GUEST_TSO6))) {
             if (device_feature & MLX5_VIRTIO_NET_F_GUEST_ECN) {
-                MLX5_LOG_ERR(s, EMU, "GUEST_ECN (0x%x) can't be set when GUEST_TSO4 (0x%x) and GUEST_TSO6 (0x%x) aren't set\n",
+                MLX5_LOG_ERR(s, EMU, "GUEST_ECN (0x%"PRIx64") can't be set when GUEST_TSO4 (0x%"PRIx64") and GUEST_TSO6 (0x%"PRIx64") aren't set\n",
                              MLX5_VIRTIO_NET_F_GUEST_ECN, MLX5_VIRTIO_NET_F_GUEST_TSO4, MLX5_VIRTIO_NET_F_GUEST_TSO6);
                 return -1;
             }
         }
         if (!(device_feature & MLX5_VIRTIO_NET_F_CTRL_VQ)) {
             if (device_feature & MLX5_VIRTIO_NET_F_CTRL_RX) {
-                MLX5_LOG_ERR(s, EMU, "CTRL_VQ (0x%x) must be set when CTRL_RX is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "CTRL_VQ (0x%"PRIx64") must be set when CTRL_RX is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_CTRL_VQ, MLX5_VIRTIO_NET_F_CTRL_RX);
                 return -1;
             }
             if (device_feature & MLX5_VIRTIO_NET_F_CTRL_VLAN) {
-                MLX5_LOG_ERR(s, EMU, "CTRL_VQ (0x%x) must be set when CTRL_VLAN is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "CTRL_VQ (0x%"PRIx64") must be set when CTRL_VLAN is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_CTRL_VQ, MLX5_VIRTIO_NET_F_CTRL_VLAN);
                 return -1;
             }
             if (device_feature & MLX5_VIRTIO_NET_F_GUEST_ANNOUNCE) {
-                MLX5_LOG_ERR(s, EMU, "CTRL_VQ (0x%x) must be set when GUEST_ANNOUNCE is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "CTRL_VQ (0x%"PRIx64") must be set when GUEST_ANNOUNCE is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_CTRL_VQ, MLX5_VIRTIO_NET_F_GUEST_ANNOUNCE);
                 return -1;
             }
             if (device_feature & MLX5_VIRTIO_NET_F_MQ) {
-                MLX5_LOG_ERR(s, EMU, "CTRL_VQ (0x%x) must be set when MQ is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "CTRL_VQ (0x%"PRIx64") must be set when MQ is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_CTRL_VQ, MLX5_VIRTIO_NET_F_MQ);
                 return -1;
             }
             if (device_feature & MLX5_VIRTIO_NET_F_CTRL_MAC_ADDR) {
-                MLX5_LOG_ERR(s, EMU, "CTRL_VQ (0x%x) must be set when MAC_ADDR is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "CTRL_VQ (0x%"PRIx64") must be set when MAC_ADDR is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_CTRL_VQ, MLX5_VIRTIO_NET_F_CTRL_MAC_ADDR);
                 return -1;
             }
@@ -1371,14 +1371,14 @@ static int mlx5_virtio_net_obj_modify(MLX5State *s, const void *obj_context, MLX
                 return -1;
             }
         } else if (max_virtqueue_pairs) {
-            MLX5_LOG_ERR(s, EMU, "%s(): max_virtqueue_pairs (0x%x) must be 0x0 when device_feature (0x%"PRIx64") doesn't support MQ (0x%x)\n",
+            MLX5_LOG_ERR(s, EMU, "%s(): max_virtqueue_pairs (0x%x) must be 0x0 when device_feature (0x%"PRIx64") doesn't support MQ (0x%"PRIx64")\n",
                          __func__, max_virtqueue_pairs, device_feature, MLX5_VIRTIO_NET_F_MQ);
             return -1;
         }
         if (device_feature & MLX5_VIRTIO_NET_F_MTU) {
             //TODO validate MTU
         } else if (mtu) {
-            MLX5_LOG_ERR(s, EMU, "%s(): mtu (0x%x) must be 0x0 when device_feature (0x%"PRIx64") doesn't support MTU (0x%x)\n",
+            MLX5_LOG_ERR(s, EMU, "%s(): mtu (0x%x) must be 0x0 when device_feature (0x%"PRIx64") doesn't support MTU (0x%"PRIx64")\n",
                          __func__, mtu, device_feature, MLX5_VIRTIO_NET_F_MTU);
             return -1;
         }
-- 
2.45.2

