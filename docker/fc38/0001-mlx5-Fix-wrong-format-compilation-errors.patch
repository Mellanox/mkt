From 6c54cf62dc44c87b8f9cc9d44599b174d13260db Mon Sep 17 00:00:00 2001
Message-ID: <6c54cf62dc44c87b8f9cc9d44599b174d13260db.1698849770.git.leon@kernel.org>
From: Leon Romanovsky <leon@kernel.org>
Date: Wed, 1 Nov 2023 15:54:20 +0200
Subject: [PATCH] mlx5: Fix wrong format compilation errors

In file included from ../mellanox/mlx_ame.h:19,
                 from mlx5/mlx5_ame.h:17,
                 from mlx5/mlx5_ifc_missing.h:19,
                 from mlx5/mlx5_ifc_types.h:19,
                 from mlx5/mlx5.h:17,
                 from mlx5/mlx5_virtio.h:17,
                 from mlx5/mlx5_virtio.c:14:
mlx5/mlx5_virtio.c: In function 'mlx5_virtio_device_feature_check':
mlx5/mlx5.h:7775:31: error: format '%x' expects argument of type 'unsigned int', but argument 10 has type 'long unsigned int' [-Werror=format=]
 7775 | #define MLX5_DEVICE_PRINT_FMT "D%u:P%u:F%u:V%u "
      |                               ^~~~~~~~~~~~~~~~~~
../mellanox/mlx_log.h:179:63: note: in definition of macro '__MLX_LOG_COMMON'
  179 |                 mlx_logger(__FILE__, __LINE__, #what, #level, fmt, ## __VA_ARGS__);            \
      |                                                               ^~~
mlx5/mlx5.h:7782:5: note: in expansion of macro 'MLX_LOG_ERR'
 7782 |     MLX_LOG_ERR(what, MLX5_DEVICE_PRINT_FMT fmt,                                   \
      |     ^~~~~~~~~~~
mlx5/mlx5.h:7782:23: note: in expansion of macro 'MLX5_DEVICE_PRINT_FMT'
 7782 |     MLX_LOG_ERR(what, MLX5_DEVICE_PRINT_FMT fmt,                                   \
      |                       ^~~~~~~~~~~~~~~~~~~~~
mlx5/mlx5_virtio.c:1218:17: note: in expansion of macro 'MLX5_LOG_ERR'
 1218 |                 MLX5_LOG_ERR(s, EMU, "GUEST_CSUM (0x%x) must be set when GUEST_TSO4 is set (0x%x)\n",
      |                 ^~~~~~~~~~~~

Signed-off-by: Leon Romanovsky <leon@kernel.org>
---
 mellanox/mlx5/mlx5_config.c |  2 +-
 mellanox/mlx5/mlx5_virtio.c | 32 ++++++++++++++++----------------
 2 files changed, 17 insertions(+), 17 deletions(-)

diff --git a/mellanox/mlx5/mlx5_config.c b/mellanox/mlx5/mlx5_config.c
index 090a0716a..90c6aa1dd 100644
--- a/mellanox/mlx5/mlx5_config.c
+++ b/mellanox/mlx5/mlx5_config.c
@@ -6590,7 +6590,7 @@ void mlx5_config_verify(const MLX5State *s)
                                      MLX5_WQE_BASED_FLOW_TABLE_CAPABILITIES_STC_ACTION_TYPE_63_0_EXECUTE_SPU)) {
             MLX5_LOG_FATAL(s, GENERAL,
                            "Unsupported stc_action_type_63_0 0x%"PRIx64", supported values are NOP(0x%x), COPY(0x%x), SET(0x%x), ADD(0x%x), REMOVE_WORDS(0x%x)\n"
-                           "HEADER_REMOVE(0x%x), HEADER_INSERT(0x%x), FLOW_TAG(0x%x), HEADER_MODIFY_LIST(0x%x), COUNT(0x%x), EXECUTE ASO(0x%x) and EXECUTE SPU(0x%x)\n",
+                           "HEADER_REMOVE(0x%x), HEADER_INSERT(0x%x), FLOW_TAG(0x%x), HEADER_MODIFY_LIST(0x%x), COUNT(0x%x), EXECUTE ASO(0x%x) and EXECUTE SPU(0x%"PRIx64")\n",
                            stc_action_type_63_0, MLX5_WQE_BASED_FLOW_TABLE_CAPABILITIES_STC_ACTION_TYPE_63_0_NOP,
                            MLX5_WQE_BASED_FLOW_TABLE_CAPABILITIES_STC_ACTION_TYPE_63_0_FIELD_COPY,
                            MLX5_WQE_BASED_FLOW_TABLE_CAPABILITIES_STC_ACTION_TYPE_63_0_FIELD_SET,
diff --git a/mellanox/mlx5/mlx5_virtio.c b/mellanox/mlx5/mlx5_virtio.c
index 534754572..66aff68b4 100644
--- a/mellanox/mlx5/mlx5_virtio.c
+++ b/mellanox/mlx5/mlx5_virtio.c
@@ -1215,80 +1215,80 @@ static int mlx5_virtio_device_feature_check(MLX5State *s, uint64_t device_featur
         }
         if (!(device_feature & MLX5_VIRTIO_NET_F_GUEST_CSUM)) {
             if (device_feature & MLX5_VIRTIO_NET_F_GUEST_TSO4) {
-                MLX5_LOG_ERR(s, EMU, "GUEST_CSUM (0x%x) must be set when GUEST_TSO4 is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "GUEST_CSUM (0x%"PRIx64") must be set when GUEST_TSO4 is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_GUEST_CSUM, MLX5_VIRTIO_NET_F_GUEST_TSO4);
                 return -1;
             }
             if (device_feature & MLX5_VIRTIO_NET_F_GUEST_TSO6) {
-                MLX5_LOG_ERR(s, EMU, "GUEST_CSUM (0x%x) must be set when GUEST_TSO6 is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "GUEST_CSUM (0x%"PRIx64") must be set when GUEST_TSO6 is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_GUEST_CSUM, MLX5_VIRTIO_NET_F_GUEST_TSO6);
                 return -1;
             }
             if (device_feature & MLX5_VIRTIO_NET_F_GUEST_UFO) {
-                MLX5_LOG_ERR(s, EMU, "GUEST_CSUM (0x%x) must be set when GUEST_UFO is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "GUEST_CSUM (0x%"PRIx64") must be set when GUEST_UFO is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_GUEST_CSUM, MLX5_VIRTIO_NET_F_GUEST_UFO);
                 return -1;
             }
         }
         if (!(device_feature & MLX5_VIRTIO_NET_F_CSUM)) {
             if (device_feature & MLX5_VIRTIO_NET_F_HOST_TSO4) {
-                MLX5_LOG_ERR(s, EMU, "CSUM (0x%x) must be set when HOST_TSO4 is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "CSUM (0x%"PRIx64") must be set when HOST_TSO4 is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_CSUM, MLX5_VIRTIO_NET_F_HOST_TSO4);
                 return -1;
             }
             if (device_feature & MLX5_VIRTIO_NET_F_HOST_TSO6) {
-                MLX5_LOG_ERR(s, EMU, "CSUM (0x%x) must be set when HOST_TSO6 is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "CSUM (0x%"PRIx64") must be set when HOST_TSO6 is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_CSUM, MLX5_VIRTIO_NET_F_HOST_TSO6);
                 return -1;
             }
             if (device_feature & MLX5_VIRTIO_NET_F_HOST_UFO) {
-                MLX5_LOG_ERR(s, EMU, "CSUM (0x%x) must be set when HOST_UFO is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "CSUM (0x%"PRIx64") must be set when HOST_UFO is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_CSUM, MLX5_VIRTIO_NET_F_HOST_UFO);
                 return -1;
             }
         }
         if (!(device_feature & (MLX5_VIRTIO_NET_F_HOST_TSO4 | MLX5_VIRTIO_NET_F_HOST_TSO6))) {
             if (device_feature & MLX5_VIRTIO_NET_F_HOST_ECN) {
-                MLX5_LOG_ERR(s, EMU, "HOST_ECN (0x%x) can't be set when HOST_TSO4 (0x%x) and HOST_TSO6 (0x%x) aren't set\n",
+                MLX5_LOG_ERR(s, EMU, "HOST_ECN (0x%"PRIx64") can't be set when HOST_TSO4 (0x%"PRIx64") and HOST_TSO6 (0x%"PRIx64") aren't set\n",
                              MLX5_VIRTIO_NET_F_HOST_ECN, MLX5_VIRTIO_NET_F_HOST_TSO4, MLX5_VIRTIO_NET_F_HOST_TSO6);
                 return -1;
             }
             if (device_feature & MLX5_VIRTIO_NET_F_RSC_EXT) {
-                MLX5_LOG_ERR(s, EMU, "RSC_EXT (0x%"PRIx64") can't be set when HOST_TSO4 (0x%x) and HOST_TSO6 (0x%x) aren't set\n",
+                MLX5_LOG_ERR(s, EMU, "RSC_EXT (0x%"PRIx64") can't be set when HOST_TSO4 (0x%"PRIx64") and HOST_TSO6 (0x%"PRIx64") aren't set\n",
                              MLX5_VIRTIO_NET_F_RSC_EXT, MLX5_VIRTIO_NET_F_HOST_TSO4, MLX5_VIRTIO_NET_F_HOST_TSO6);
                 return -1;
             }
         }
         if (!(device_feature & (MLX5_VIRTIO_NET_F_GUEST_TSO4 | MLX5_VIRTIO_NET_F_GUEST_TSO6))) {
             if (device_feature & MLX5_VIRTIO_NET_F_GUEST_ECN) {
-                MLX5_LOG_ERR(s, EMU, "GUEST_ECN (0x%x) can't be set when GUEST_TSO4 (0x%x) and GUEST_TSO6 (0x%x) aren't set\n",
+                MLX5_LOG_ERR(s, EMU, "GUEST_ECN (0x%"PRIx64") can't be set when GUEST_TSO4 (0x%"PRIx64") and GUEST_TSO6 (0x%"PRIx64") aren't set\n",
                              MLX5_VIRTIO_NET_F_GUEST_ECN, MLX5_VIRTIO_NET_F_GUEST_TSO4, MLX5_VIRTIO_NET_F_GUEST_TSO6);
                 return -1;
             }
         }
         if (!(device_feature & MLX5_VIRTIO_NET_F_CTRL_VQ)) {
             if (device_feature & MLX5_VIRTIO_NET_F_CTRL_RX) {
-                MLX5_LOG_ERR(s, EMU, "CTRL_VQ (0x%x) must be set when CTRL_RX is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "CTRL_VQ (0x%"PRIx64") must be set when CTRL_RX is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_CTRL_VQ, MLX5_VIRTIO_NET_F_CTRL_RX);
                 return -1;
             }
             if (device_feature & MLX5_VIRTIO_NET_F_CTRL_VLAN) {
-                MLX5_LOG_ERR(s, EMU, "CTRL_VQ (0x%x) must be set when CTRL_VLAN is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "CTRL_VQ (0x%"PRIx64") must be set when CTRL_VLAN is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_CTRL_VQ, MLX5_VIRTIO_NET_F_CTRL_VLAN);
                 return -1;
             }
             if (device_feature & MLX5_VIRTIO_NET_F_GUEST_ANNOUNCE) {
-                MLX5_LOG_ERR(s, EMU, "CTRL_VQ (0x%x) must be set when GUEST_ANNOUNCE is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "CTRL_VQ (0x%"PRIx64") must be set when GUEST_ANNOUNCE is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_CTRL_VQ, MLX5_VIRTIO_NET_F_GUEST_ANNOUNCE);
                 return -1;
             }
             if (device_feature & MLX5_VIRTIO_NET_F_MQ) {
-                MLX5_LOG_ERR(s, EMU, "CTRL_VQ (0x%x) must be set when MQ is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "CTRL_VQ (0x%"PRIx64") must be set when MQ is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_CTRL_VQ, MLX5_VIRTIO_NET_F_MQ);
                 return -1;
             }
             if (device_feature & MLX5_VIRTIO_NET_F_CTRL_MAC_ADDR) {
-                MLX5_LOG_ERR(s, EMU, "CTRL_VQ (0x%x) must be set when MAC_ADDR is set (0x%x)\n",
+                MLX5_LOG_ERR(s, EMU, "CTRL_VQ (0x%"PRIx64") must be set when MAC_ADDR is set (0x%"PRIx64")\n",
                              MLX5_VIRTIO_NET_F_CTRL_VQ, MLX5_VIRTIO_NET_F_CTRL_MAC_ADDR);
                 return -1;
             }
@@ -1371,14 +1371,14 @@ static int mlx5_virtio_net_obj_modify(MLX5State *s, const void *obj_context, MLX
                 return -1;
             }
         } else if (max_virtqueue_pairs) {
-            MLX5_LOG_ERR(s, EMU, "%s(): max_virtqueue_pairs (0x%x) must be 0x0 when device_feature (0x%"PRIx64") doesn't support MQ (0x%x)\n",
+            MLX5_LOG_ERR(s, EMU, "%s(): max_virtqueue_pairs (0x%x) must be 0x0 when device_feature (0x%"PRIx64") doesn't support MQ (0x%"PRIx64")\n",
                          __func__, max_virtqueue_pairs, device_feature, MLX5_VIRTIO_NET_F_MQ);
             return -1;
         }
         if (device_feature & MLX5_VIRTIO_NET_F_MTU) {
             //TODO validate MTU
         } else if (mtu) {
-            MLX5_LOG_ERR(s, EMU, "%s(): mtu (0x%x) must be 0x0 when device_feature (0x%"PRIx64") doesn't support MTU (0x%x)\n",
+            MLX5_LOG_ERR(s, EMU, "%s(): mtu (0x%x) must be 0x0 when device_feature (0x%"PRIx64") doesn't support MTU (0x%"PRIx64")\n",
                          __func__, mtu, device_feature, MLX5_VIRTIO_NET_F_MTU);
             return -1;
         }
-- 
2.41.0

